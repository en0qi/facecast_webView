<!DOCTYPE html>
<html lang="ja">
<head>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <title>face transmmit</title>

        <!--Import Google Icon Font-->
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
        <!-- Compiled and minified CSS -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">

        <!-- Compiled and minified JavaScript -->
        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
        <!--Let browser know website is optimized for mobile-->
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

        <!--socket-->
        <script src="/socket.io/socket.io.js"></script>

        <!--three js-->
        <script src="/three/build/three.js"></script>

        <script src="/three/examples/js/controls/OrbitControls.js"></script>
        <script src="/three/examples/js/loaders/GLTFLoader.js"></script>
        <script src="/three/examples/js/loaders/VRMLoader.js"></script>

        <script src="/three/examples/js/WebGL.js"></script>
        <script src="/three/examples/js/libs/stats.min.js"></script>
    </head>
    <meta charset="UTF-8">
    <title>Title</title>

</head>
<body>
    <script>
        $('#m').val('New Text');
        M.textareaAutoResize($('#m'));

        $(function () {
            var socket = io();
            socket.emit('client_to_server_join', 0);

            socket.on('chat message', function (id, name, msg, date) { //サーバーサイド(app.js)から受け取ったmsgの表示
                if (id == 0) {
                    $('#messages').prepend($('<li>').html(msg + '<br>' + date + '<div class="divider"></div>'));
                } else {
                    $('#messages').prepend($('<li>').html(msg + '<br>' + date + '<div class="divider"></div>'));
                }
            });
        });

        if ( WEBGL.isWebGLAvailable() === false ) {

            document.body.appendChild( WEBGL.getWebGLErrorMessage() );

        }

        var container, stats, controls;
        var camera, scene, renderer, light;

        init();
        animate();

        function init() {

            container = document.createElement( 'div' );
            document.body.appendChild( container );

            camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.25, 20 );
            camera.position.set( 0, 1.6, - 2.2 );

            controls = new THREE.OrbitControls( camera );
            controls.target.set( 0, 0.9, 0 );
            controls.update();

            scene = new THREE.Scene();

            light = new THREE.HemisphereLight( 0xbbbbff, 0x444422 );
            light.position.set( 0, 1, 0 );
            scene.add( light );

            // model
            var loader = new THREE.VRMLoader();

            loader.load( '/src/vrm/Alicia/VRM/AliciaSolid.vrm', function ( vrm ) {

                console.log(vrm.blendShape)
                vrm.BlendShapeMerger.SetValue(BlendShapePreset.Blink, 0)
                // VRMLoader doesn't support VRM Unlit extension yet so
                // converting all materials to MeshBasicMaterial here as workaround so far.
                vrm.scene.traverse( function ( object ) {

                    if ( object.material ) {

                        if ( Array.isArray( object.material ) ) {

                            for ( var i = 0, il = object.material.length; i < il; i ++ ) {

                                var material = new THREE.MeshBasicMaterial();
                                THREE.Material.prototype.copy.call( material, object.material[ i ] );
                                material.color.copy( object.material[ i ].color );
                                material.map = object.material[ i ].map;
                                material.lights = false;
                                material.skinning = object.material[ i ].skinning;
                                material.morphTargets = object.material[ i ].morphTargets;
                                material.morphNormals = object.material[ i ].morphNormals;
                                object.material[ i ] = material;

                            }

                        } else {

                            var material = new THREE.MeshBasicMaterial();
                            THREE.Material.prototype.copy.call( material, object.material );
                            material.color.copy( object.material.color );
                            material.map = object.material.map;
                            material.lights = false;
                            material.skinning = object.material.skinning;
                            material.morphTargets = object.material.morphTargets;
                            material.morphNormals = object.material.morphNormals;
                            object.material = material;

                        }

                    }

                } );

                scene.add( vrm.scene );

            } );

            renderer = new THREE.WebGLRenderer( { antialias: true } );
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setSize( window.innerWidth, window.innerHeight );
            renderer.gammaOutput = true;
            container.appendChild( renderer.domElement );

            window.addEventListener( 'resize', onWindowResize, false );

            // stats
            stats = new Stats();
            container.appendChild( stats.dom );

        }

        function onWindowResize() {

            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize( window.innerWidth, window.innerHeight );

        }


        function animate() { //frame更新毎に呼ばれる

            requestAnimationFrame( animate );

            renderer.render( scene, camera );

            stats.update();

        }

    </script>
    <ul id="messages"></ul>
</body>
</html>
<!DOCTYPE html>
<html lang="ja">

<head>

    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <title>face transmmit</title>

        <!--Import Google Icon Font-->
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
        <!-- Compiled and minified CSS -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">

        <!-- Compiled and minified JavaScript -->
        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
        <!--Let browser know website is optimized for mobile-->
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    </head>
    <meta charset="UTF-8">
    <title>Title</title>

</head>

<body>
    <script>
        import socket from 'socket';
        import * as THREE from 'three';
        import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
        import OrbitControls from 'three/examples/js/controls/OrbitControls';
        import { VRM } from '@pixiv/three-vrm';

        var blendShapes = {};

        () => {
            var socket = io();
            socket.emit('client_to_server_join', 1);
            console.log("joined")

            socket.on('chat message', function (array) { // from app.js emit()
                blendShapes = JSON.parse(array)
            });
        };

        if (WEBGL.isWebGLAvailable() === false) {

            document.body.appendChild(WEBGL.getWebGLErrorMessage());

        }

        var container, stats, controls;
        var camera, scene, renderer, light;

        init();
        animate();

        function init() {

            container = document.createElement('div');
            document.body.appendChild(container);

            camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.25, 20);
            camera.position.set(0, 1.6, - 2.2);

            controls = new THREE.OrbitControls(camera);
            controls.target.set(0, 0.9, 0);
            controls.update();

            scene = new THREE.Scene();

            light = new THREE.HemisphereLight(0xbbbbff, 0x444422);
            light.position.set(0, 1, 0);
            scene.add(light);

            // model
            var loader = new GLTFLoader();

            loader.load('/src/vrm/Alicia/VRM/AliciaSolid.vrm', (gltf) => {
                VRM.from(gltf).then((vrm) => {
                    scene.add(vrm.scene);
                })

            });

            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.gammaOutput = true;
            container.appendChild(renderer.domElement);

            window.addEventListener('resize', onWindowResize, false);

            // stats
            stats = new Stats();
            container.appendChild(stats.dom);
        }

        function onWindowResize() {

            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize(window.innerWidth, window.innerHeight);

        }


        function animate() { //frame更新毎に呼ばれる
            if (scene.children[1]) {
                console.log(blendShapes)
                scene.children[1].children[2].skeleton.bones[0].quaternion["_y"] = blendShapes.eyeL; //eye_L
                scene.children[1].children[2].skeleton.bones[1].quaternion["_y"] = blendShapes.eyeR; //eye_R
                scene.children[1].children[4].quaternion["_y"] = blendShapes.faceDir;
            }

            requestAnimationFrame(animate);

            renderer.render(scene, camera);

            stats.update();

        }

    </script>
    <ul id="messages"></ul>
</body>

</html>